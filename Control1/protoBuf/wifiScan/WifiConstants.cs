// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: wifi_constants.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from wifi_constants.proto</summary>
public static partial class WifiConstantsReflection {

  #region Descriptor
  /// <summary>File descriptor for wifi_constants.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static WifiConstantsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChR3aWZpX2NvbnN0YW50cy5wcm90byJ2ChJXaWZpQ29ubmVjdGVkU3RhdGUS",
          "EAoIaXA0X2FkZHIYASABKAkSIAoJYXV0aF9tb2RlGAIgASgOMg0uV2lmaUF1",
          "dGhNb2RlEgwKBHNzaWQYAyABKAwSDQoFYnNzaWQYBCABKAwSDwoHY2hhbm5l",
          "bBgFIAEoBSpZChBXaWZpU3RhdGlvblN0YXRlEg0KCUNvbm5lY3RlZBAAEg4K",
          "CkNvbm5lY3RpbmcQARIQCgxEaXNjb25uZWN0ZWQQAhIUChBDb25uZWN0aW9u",
          "RmFpbGVkEAMqPQoXV2lmaUNvbm5lY3RGYWlsZWRSZWFzb24SDQoJQXV0aEVy",
          "cm9yEAASEwoPTmV0d29ya05vdEZvdW5kEAEqhAEKDFdpZmlBdXRoTW9kZRII",
          "CgRPcGVuEAASBwoDV0VQEAESCwoHV1BBX1BTSxACEgwKCFdQQTJfUFNLEAMS",
          "EAoMV1BBX1dQQTJfUFNLEAQSEwoPV1BBMl9FTlRFUlBSSVNFEAUSDAoIV1BB",
          "M19QU0sQBhIRCg1XUEEyX1dQQTNfUFNLEAdiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::WifiStationState), typeof(global::WifiConnectFailedReason), typeof(global::WifiAuthMode), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::WifiConnectedState), global::WifiConnectedState.Parser, new[]{ "Ip4Addr", "AuthMode", "Ssid", "Bssid", "Channel" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum WifiStationState {
  [pbr::OriginalName("Connected")] Connected = 0,
  [pbr::OriginalName("Connecting")] Connecting = 1,
  [pbr::OriginalName("Disconnected")] Disconnected = 2,
  [pbr::OriginalName("ConnectionFailed")] ConnectionFailed = 3,
}

public enum WifiConnectFailedReason {
  [pbr::OriginalName("AuthError")] AuthError = 0,
  [pbr::OriginalName("NetworkNotFound")] NetworkNotFound = 1,
}

public enum WifiAuthMode {
  [pbr::OriginalName("Open")] Open = 0,
  [pbr::OriginalName("WEP")] Wep = 1,
  [pbr::OriginalName("WPA_PSK")] WpaPsk = 2,
  [pbr::OriginalName("WPA2_PSK")] Wpa2Psk = 3,
  [pbr::OriginalName("WPA_WPA2_PSK")] WpaWpa2Psk = 4,
  [pbr::OriginalName("WPA2_ENTERPRISE")] Wpa2Enterprise = 5,
  [pbr::OriginalName("WPA3_PSK")] Wpa3Psk = 6,
  [pbr::OriginalName("WPA2_WPA3_PSK")] Wpa2Wpa3Psk = 7,
}

#endregion

#region Messages
public sealed partial class WifiConnectedState : pb::IMessage<WifiConnectedState>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<WifiConnectedState> _parser = new pb::MessageParser<WifiConnectedState>(() => new WifiConnectedState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<WifiConnectedState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::WifiConstantsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WifiConnectedState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WifiConnectedState(WifiConnectedState other) : this() {
    ip4Addr_ = other.ip4Addr_;
    authMode_ = other.authMode_;
    ssid_ = other.ssid_;
    bssid_ = other.bssid_;
    channel_ = other.channel_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public WifiConnectedState Clone() {
    return new WifiConnectedState(this);
  }

  /// <summary>Field number for the "ip4_addr" field.</summary>
  public const int Ip4AddrFieldNumber = 1;
  private string ip4Addr_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Ip4Addr {
    get { return ip4Addr_; }
    set {
      ip4Addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "auth_mode" field.</summary>
  public const int AuthModeFieldNumber = 2;
  private global::WifiAuthMode authMode_ = global::WifiAuthMode.Open;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::WifiAuthMode AuthMode {
    get { return authMode_; }
    set {
      authMode_ = value;
    }
  }

  /// <summary>Field number for the "ssid" field.</summary>
  public const int SsidFieldNumber = 3;
  private pb::ByteString ssid_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Ssid {
    get { return ssid_; }
    set {
      ssid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "bssid" field.</summary>
  public const int BssidFieldNumber = 4;
  private pb::ByteString bssid_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString Bssid {
    get { return bssid_; }
    set {
      bssid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 5;
  private int channel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as WifiConnectedState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(WifiConnectedState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ip4Addr != other.Ip4Addr) return false;
    if (AuthMode != other.AuthMode) return false;
    if (Ssid != other.Ssid) return false;
    if (Bssid != other.Bssid) return false;
    if (Channel != other.Channel) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Ip4Addr.Length != 0) hash ^= Ip4Addr.GetHashCode();
    if (AuthMode != global::WifiAuthMode.Open) hash ^= AuthMode.GetHashCode();
    if (Ssid.Length != 0) hash ^= Ssid.GetHashCode();
    if (Bssid.Length != 0) hash ^= Bssid.GetHashCode();
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Ip4Addr.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Ip4Addr);
    }
    if (AuthMode != global::WifiAuthMode.Open) {
      output.WriteRawTag(16);
      output.WriteEnum((int) AuthMode);
    }
    if (Ssid.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Ssid);
    }
    if (Bssid.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Bssid);
    }
    if (Channel != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Channel);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Ip4Addr.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Ip4Addr);
    }
    if (AuthMode != global::WifiAuthMode.Open) {
      output.WriteRawTag(16);
      output.WriteEnum((int) AuthMode);
    }
    if (Ssid.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Ssid);
    }
    if (Bssid.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Bssid);
    }
    if (Channel != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Channel);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Ip4Addr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip4Addr);
    }
    if (AuthMode != global::WifiAuthMode.Open) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuthMode);
    }
    if (Ssid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ssid);
    }
    if (Bssid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bssid);
    }
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(WifiConnectedState other) {
    if (other == null) {
      return;
    }
    if (other.Ip4Addr.Length != 0) {
      Ip4Addr = other.Ip4Addr;
    }
    if (other.AuthMode != global::WifiAuthMode.Open) {
      AuthMode = other.AuthMode;
    }
    if (other.Ssid.Length != 0) {
      Ssid = other.Ssid;
    }
    if (other.Bssid.Length != 0) {
      Bssid = other.Bssid;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Ip4Addr = input.ReadString();
          break;
        }
        case 16: {
          AuthMode = (global::WifiAuthMode) input.ReadEnum();
          break;
        }
        case 26: {
          Ssid = input.ReadBytes();
          break;
        }
        case 34: {
          Bssid = input.ReadBytes();
          break;
        }
        case 40: {
          Channel = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Ip4Addr = input.ReadString();
          break;
        }
        case 16: {
          AuthMode = (global::WifiAuthMode) input.ReadEnum();
          break;
        }
        case 26: {
          Ssid = input.ReadBytes();
          break;
        }
        case 34: {
          Bssid = input.ReadBytes();
          break;
        }
        case 40: {
          Channel = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
